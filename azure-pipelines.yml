# Node.js Express Web App to Linux on Azure
# Build a Node.js Express app and deploy it to Azure as a Linux web app.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- main

variables:

  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: '42e4df69-cfa6-4761-be90-828a2ae55e9e'

  # Web app name
  webAppName: 'pfe2023Frontend-dev'

  # Environment name
  environmentName: 'pfe2023Frontend-dev'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Install Node.js'

    - script: |
        npm install
        npm run build --if-present
        npm run test --if-present
      displayName: 'npm install, build and test'

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()
  jobs:
    - deployment: Deploy
      displayName: Deploy
      environment: $(environmentName)
      pool:
        vmImage: $(vmImageName)
      strategy:
        runOnce:
          deploy:
            steps:
              - task: AzureWebApp@1
                inputs:
                  azureSubscription: $(azureSubscription)
                  appType: 'webAppLinux'
                  appName: $(webAppName)
                  runtimeStack: 'NODE|18-lts'
                  package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip

              # Pas besoin d'exécuter `npm install` si tous les modules nécessaires sont dans l'archive
              # - script: |
              #     npm install --production
              #   displayName: 'Install npm packages'

              - script: |
                  echo "Vérification de l'emplacement du package.json..."
                  pwd
                  ls -alh
                displayName: 'Vérifie l'emplacement du package.json'

              - script: |
                  echo "Démarrage de l'application..."
                  npm run dev
                displayName: 'Start Node.js app'
